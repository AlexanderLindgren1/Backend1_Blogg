const express = require("express")
const app = express()
const jwt = require("jsonwebtoken")
require('dotenv').config()
const bcrypt = require("bcrypt")
app.use(express.json())
const Posts = [
    { username: "Alexander", title: "post1" },
    { username: "Sovi", title: "post2" },
    { username: "Olsson", title: "post3" },

]

const users = [
    { name: "Alexander", password: "post1" },
    { name: "Sovi", password: "post2" },
    { name: "Olsson", password: "post3" },

]
app.get("/users", (req, res) => {
    res.send(users)
})

app.get("/posts",authhenticateToken, (req, res) => {
    res.json(Posts.filter(Post => Post.username === req.users.name))
})


app.post("/users", async (req, res) => {

    try {
        const salt = await bcrypt.genSalt()
        const hashPassword = await bcrypt.hash(req.body.password, salt)



        const user = { name: req.body.name, password: hashPassword }
        users.push(user)
        res.status(201).send(users)
    }
    catch (err) {
        res.status(500).send()
        console.log(err);
    }

})

app.post("/users/login", async (req, res) => {
    // const user = users.find(user => user.name == req.body.name)
    // if(user == null){
    //     return res.send(400).send("Cannot find user")
    // }

    // try{
    //     if(await bcrypt.compare(req.body.password, user.password)) {
    //         console.log(user.name);
    //         console.log(req.body.name);

    //         console.log("Bravo success");
    //     }
    //     else{
    //         console.log("Not Allowed");

    //     }
    // }
    // catch(err){
    //     res.status(500).send("NO!!!")
    // }

    try {
        const name = req.body.name
        const User = { name: name }

        const accessToken = jwt.sign(User, process.env.ACCESS_TOKEN_SECRET)
        res.json({ accessToken: accessToken })
    }
    catch (err) {
        console.log(err);
    }

 

})
   function authhenticateToken(req, res, next) {
        const authHeader = req.headers["authorization"]
        const token = authHeader && authHeader.split(" ")[1]
        if (token == null) return res.sendStatus(401)

        jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user)=>{
            if(err) return res.sendStatus(403)
            req.user = user
        next()
        })

    }
app.listen(5000, () => {
    console.log("Server started on port 5000");
})

//